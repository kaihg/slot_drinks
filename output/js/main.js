var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var App;
(function (App) {
    var Constants = /** @class */ (function () {
        function Constants() {
        }
        Constants.SYMBOL_WIDTH = 200;
        Constants.SYMBOL_HEIGHT = 100;
        return Constants;
    }());
    App.Constants = Constants;
})(App || (App = {}));
var App;
(function (App) {
    var Main = /** @class */ (function () {
        function Main() {
            this.initPIXI();
            this.startLoading();
        }
        Main.prototype.initPIXI = function () {
            this.app = new PIXI.Application(window.innerWidth, window.innerHeight, { backgroundColor: 0x1099bb });
            document.body.appendChild(this.app.view);
        };
        Main.prototype.startLoading = function () {
            var _this = this;
            var loadingView = new view.LoadingView();
            loadingView.x = this.app.screen.width / 2;
            loadingView.y = this.app.screen.height / 2;
            this.app.stage.addChild(loadingView);
            PIXI.loader
                .on("progress", function (loader, resource) { loadingView.updateProgress(loader.progress); })
                .add("shops", "resource/shops.json")
                .load(function () {
                loadingView.parent.removeChild(loadingView);
                _this.onLoaded();
            });
        };
        Main.prototype.onLoaded = function () {
            this.initReelView(PIXI.loader.resources.shops.data);
            this.initSpinButton();
        };
        Main.prototype.initReelView = function (shops) {
            console.log(shops);
            var reel = new view.ReelView(shops);
            reel.x = this.app.screen.width / 2;
            reel.y = this.app.screen.height / 2;
            this.app.stage.addChild(reel);
            this.reelView = reel;
        };
        Main.prototype.initSpinButton = function () {
            var btn = new PIXI.Text("開始");
            btn.anchor.set(0.5);
            btn.x = this.reelView.x;
            btn.y = this.reelView.y + App.Constants.SYMBOL_HEIGHT;
            // btn.x = this.app.screen.width - 64;
            // btn.y = this.app.screen.height - 48;
            btn.interactive = true;
            btn.on('pointerup', this.spin.bind(this));
            this.app.stage.addChild(btn);
        };
        Main.prototype.spin = function () {
            this.reelView.onSpin();
        };
        return Main;
    }());
    App.Main = Main;
})(App || (App = {}));
var view;
(function (view) {
    var LoadingView = /** @class */ (function (_super) {
        __extends(LoadingView, _super);
        function LoadingView() {
            var _this = _super.call(this) || this;
            _this.progress = 0;
            _this.color = 0xaabc13;
            return _this;
        }
        LoadingView.prototype.updateProgress = function (p) {
            var percent = p;
            this.progress = percent;
            this.clear();
            this.lineStyle(10, this.color);
            // this.drawCircle(0, 0, 2 * Math.PI * percent);
            this.arc(0, 0, 50, 0, 2 * Math.PI * percent);
            this.endFill();
        };
        return LoadingView;
    }(PIXI.Graphics));
    view.LoadingView = LoadingView;
})(view || (view = {}));
var view;
(function (view) {
    var ReelView = /** @class */ (function (_super) {
        __extends(ReelView, _super);
        // private _mask: PIXI.DisplayObject;
        function ReelView(shops) {
            var _this = _super.call(this) || this;
            _this.tempIds = [0, 1, 2];
            _this.shops = shops;
            var width = App.Constants.SYMBOL_WIDTH;
            var height = App.Constants.SYMBOL_HEIGHT;
            _this.frame = new PIXI.Graphics();
            _this.frame.lineStyle(10, 0x000000);
            _this.frame.drawRect(-width * 0.5, -height * 0.5, width, height);
            _this.frame.endFill();
            // mask
            var mask = new PIXI.Graphics();
            mask.beginFill(0xFFFFFF);
            mask.drawRect(-width * 0.5, -height * 0.5, width, height);
            mask.endFill();
            // wheel
            var wheel = new view.WheelView(shops);
            wheel.mask = mask;
            wheel.setIds(_this.tempIds);
            _this.wheel = wheel;
            _this.addChild(wheel, mask, _this.frame);
            _this.updateShop(_this.tempIds);
            return _this;
        }
        ReelView.prototype.updateShop = function (shopId) {
            this.wheel.setIds(shopId);
        };
        ReelView.prototype.onSpin = function () {
            if (this.spining) {
                return;
            }
            this.spining = true;
            TweenMax.fromTo(this.wheel.position, 0.2, { y: 0 }, { y: App.Constants.SYMBOL_HEIGHT, repeat: 10, ease: Linear.easeNone, onRepeat: this.swapId, onRepeatScope: this, onComplete: this.onSpinComplete, onCompleteScope: this });
        };
        ReelView.prototype.randomId = function () {
            return Math.floor(Math.random() * this.shops.length);
        };
        ReelView.prototype.swapId = function () {
            this.tempIds.unshift(this.randomId());
            this.updateShop(this.tempIds);
        };
        ReelView.prototype.onSpinComplete = function () {
            this.spining = false;
            this.tempIds.unshift(this.randomId());
            this.tempIds.unshift(this.randomId());
            this.updateShop(this.tempIds);
            TweenLite.fromTo(this.wheel.position, 1, { y: -App.Constants.SYMBOL_HEIGHT }, { y: 0, ease: Back.easeOut });
        };
        return ReelView;
    }(PIXI.Sprite));
    view.ReelView = ReelView;
})(view || (view = {}));
var view;
(function (view) {
    var WheelView = /** @class */ (function (_super) {
        __extends(WheelView, _super);
        function WheelView(shops) {
            var _this = _super.call(this, PIXI.Texture.EMPTY) || this;
            _this.shops = shops;
            for (var i = 0; i < 3; i++) {
                var symbolText = new PIXI.Text("", { fill: "0x000000" });
                symbolText.anchor.set(0.5);
                var bg = new PIXI.Sprite(PIXI.Texture.WHITE);
                bg.width = App.Constants.SYMBOL_WIDTH;
                bg.height = App.Constants.SYMBOL_HEIGHT;
                bg.anchor.set(0.5);
                var container = new PIXI.Container();
                container.addChild(bg, symbolText);
                container.y = (i - 1) * App.Constants.SYMBOL_HEIGHT;
                _this.addChild(container);
            }
            return _this;
        }
        WheelView.prototype.setIds = function (ids) {
            var _this = this;
            this.children.forEach(function (child, i) {
                var textView = child.getChildAt(1);
                textView.text = _this.shops[ids[i]];
            });
        };
        return WheelView;
    }(PIXI.Sprite));
    view.WheelView = WheelView;
})(view || (view = {}));

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9Db25zdGFudHMudHMiLCJzcmMvTWFpbi50cyIsInNyYy92aWV3L0xvYWRpbmdWaWV3LnRzIiwic3JjL3ZpZXcvUmVlbFZpZXcudHMiLCJzcmMvdmlldy9XaGVlbFZpZXcudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7OztBQUFBLElBQU8sR0FBRyxDQUtUO0FBTEQsV0FBTyxHQUFHO0lBQ047UUFBQTtRQUdBLENBQUM7UUFGaUIsc0JBQVksR0FBRyxHQUFHLENBQUM7UUFDbkIsdUJBQWEsR0FBRyxHQUFHLENBQUM7UUFDdEMsZ0JBQUM7S0FIRCxBQUdDLElBQUE7SUFIWSxhQUFTLFlBR3JCLENBQUE7QUFDTCxDQUFDLEVBTE0sR0FBRyxLQUFILEdBQUcsUUFLVDtBQ0xELElBQU8sR0FBRyxDQXdFVDtBQXhFRCxXQUFPLEdBQUc7SUFDTjtRQU1JO1lBRUksSUFBSSxDQUFDLFFBQVEsRUFBRSxDQUFDO1lBQ2hCLElBQUksQ0FBQyxZQUFZLEVBQUUsQ0FBQztRQUV4QixDQUFDO1FBRU8sdUJBQVEsR0FBaEI7WUFDSSxJQUFJLENBQUMsR0FBRyxHQUFHLElBQUksSUFBSSxDQUFDLFdBQVcsQ0FBQyxNQUFNLENBQUMsVUFBVSxFQUFFLE1BQU0sQ0FBQyxXQUFXLEVBQUUsRUFBRSxlQUFlLEVBQUUsUUFBUSxFQUFFLENBQUMsQ0FBQztZQUN0RyxRQUFRLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxDQUFDO1FBQzdDLENBQUM7UUFFRCwyQkFBWSxHQUFaO1lBQUEsaUJBZUM7WUFkRyxJQUFJLFdBQVcsR0FBRyxJQUFJLElBQUksQ0FBQyxXQUFXLEVBQUUsQ0FBQztZQUN6QyxXQUFXLENBQUMsQ0FBQyxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLEtBQUssR0FBRyxDQUFDLENBQUM7WUFDMUMsV0FBVyxDQUFDLENBQUMsR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDLE1B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R0FBRyxHQUFHLENBQUMsU0FBUyxDQUFDLGFBQWEsQ0FBQztnQkFFcEQsS0FBSSxDQUFDLFFBQVEsQ0FBQyxTQUFTLENBQUMsQ0FBQzthQUM1Qjs7UUFDTCxDQUFDO1FBRUQsMEJBQU0sR0FBTixVQUFPLEdBQWE7WUFBcEIsaUJBS0M7WUFKRyxJQUFJLENBQUMsUUFBUSxDQUFDLE9BQU8sQ0FBQyxVQUFDLEtBQXFCLEVBQUUsQ0FBQztnQkFDM0MsSUFBSSxRQUFRLEdBQUcsS0FBSyxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQWMsQ0FBQztnQkFDaEQsUUFBUSxDQUFDLElBQUksR0FBRyxLQUFJLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBQ3ZDLENBQUMsQ0FBQyxDQUFBO1FBQ04sQ0FBQztRQUVMLGdCQUFDO0lBQUQsQ0FqQ0EsQUFpQ0MsQ0FqQzhCLElBQUksQ0FBQyxNQUFNLEdBaUN6QztJQWpDWSxjQUFTLFlBaUNyQixDQUFBO0FBQ0wsQ0FBQyxFQW5DTSxJQUFJLEtBQUosSUFBSSxRQW1DViIsImZpbGUiOiJtYWluLmpzIiwic291cmNlc0NvbnRlbnQiOlsibW9kdWxlIEFwcCB7XG4gICAgZXhwb3J0IGNsYXNzIENvbnN0YW50cyB7XG4gICAgICAgIHB1YmxpYyBzdGF0aWMgU1lNQk9MX1dJRFRIID0gMjAwO1xuICAgICAgICBwdWJsaWMgc3RhdGljIFNZTUJPTF9IRUlHSFQgPSAxMDA7XG4gICAgfVxufSIsIm1vZHVsZSBBcHAge1xuICAgIGV4cG9ydCBjbGFzcyBNYWluIHtcblxuICAgICAgICBwcml2YXRlIGFwcDogUElYSS5BcHBsaWNhdGlvbjtcblxuICAgICAgICBwcml2YXRlIHJlZWxWaWV3OiB2aWV3LlJlZWxWaWV3O1xuXG4gICAgICAgIGNvbnN0cnVjdG9yKCkge1xuXG4gICAgICAgICAgICB0aGlzLmluaXRQSVhJKCk7XG4gICAgICAgICAgICB0aGlzLnN0YXJ0TG9hZGluZygpO1xuXG4gICAgICAgIH1cblxuICAgICAgICBwcml2YXRlIGluaXRQSVhJKCkge1xuICAgICAgICAgICAgdGhpcy5hcHAgPSBuZXcgUElYSS5BcHBsaWNhdGlvbih3aW5kb3cuaW5uZXJXaWR0aCwgd2luZG93LmlubmVySGVpZ2h0LCB7IGJhY2tncm91bmRDb2xvcjogMHgxMDk5YmIgfSk7XG4gICAgICAgICAgICBkb2N1bWVudC5ib2R5LmFwcGVuZENoaWxkKHRoaXMuYXBwLnZpZXcpO1xuICAgICAgICB9XG5cbiAgICAgICAgc3RhcnRMb2FkaW5nKCk6IGFueSB7XG4gICAgICAgICAgICBsZXQgbG9hZGluZ1ZpZXcgPSBuZXcgdmlldy5Mb2FkaW5nVmlldygpO1xuICAgICAgICAgICAgbG9hZGluZ1ZpZXcueCA9IHRoaXMuYXBwLnNjcmVlbi53aWR0aCAvIDI7XG4gICAgICAgICAgICBsb2FkaW5nVmlldy55ID0gdGhpcy5hcHAuc2NyZWVuLmhlaWdodCAvIDI7XG5cbiAgICAgICAgICAgIHRoaXMuYXBwLnN0YWdlLmFkZENoaWxkKGxvYWRpbmdWaWV3KTtcblxuICAgICAgICAgICAgUElYSS5sb2FkZXJcbiAgICAgICAgICAgICAgICAub24oXCJwcm9ncmVzc1wiLCAobG9hZGVyOiBQSVhJLmxvYWRlcnMuTG9hZGVyLCByZXNvdXJjZTogUElYSS5sb2FkZXJzLlJlc291cmNlKSA9PiB7IGxvYWRpbmdWaWV3LnVwZGF0ZVByb2dyZXNzKGxvYWRlci5wcm9ncmVzcykgfSlcbiAgICAgICAgICAgICAgICAuYWRkKFwic2hvcHNcIiwgXCJyZXNvdXJjZS9zaG9wcy5qc29uXCIpXG4gICAgICAgICAgICAgICAgLmxvYWQoKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICBsb2FkaW5nVmlldy5wYXJlbnQucmVtb3ZlQ2hpbGQobG9hZGluZ1ZpZXcpO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLm9uTG9hZGVkKCk7XG4gICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgfVxuXG4gICAgICAgIG9uTG9hZGVkKCkge1xuICAgICAgICAgICAgdGhpcy5pbml0UmVlbFZpZXcoUElYSS5sb2FkZXIucmVzb3VyY2VzLnNob3BzLmRhdGEpO1xuICAgICAgICAgICAgdGhpcy5pbml0U3BpbkJ1dHRvbigpO1xuICAgICAgICB9XG5cbiAgICAgICAgaW5pdFJlZWxWaWV3KHNob3BzOiBzdHJpbmdbXSkge1xuICAgICAgICAgICAgY29uc29sZS5sb2coc2hvcHMpO1xuICAgICAgICAgICAgbGV0IHJlZWwgPSBuZXcgdmlldy5SZWVsVmlldyhzaG9wcyk7XG4gICAgICAgICAgICByZWVsLnggPSB0aGlzLmFwcC5zY3JlZW4ud2lkdGggLyAyO1xuICAgICAgICAgICAgcmVlbC55ID0gdGhpcy5hcHAuc2NyZWVuLmhlaWdodCAvIDI7XG5cbiAgICAgICAgICAgIHRoaXMuYXBwLnN0YWdlLmFkZENoaWxkKHJlZWwpO1xuXG4gICAgICAgICAgICB0aGlzLnJlZWxWaWV3ID0gcmVlbDtcbiAgICAgICAgfVxuXG4gICAgICAgIGluaXRTcGluQnV0dG9uKCkge1xuICAgICAgICAgICAgbGV0IGJ0biA9IG5ldyBQSVhJLlRleHQoXCLplovlp4tcIik7XG4gICAgICAgICAgICBidG4uYW5jaG9yLnNldCgwLjUpO1xuICAgICAgICAgICAgYnRuLnggPSB0aGlzLnJlZWxWaWV3Lng7XG4gICAgICAgICAgICBidG4ueSA9IHRoaXMucmVlbFZpZXcueSArIEFwcC5Db25zdGFudHMuU1lNQk9MX0hFSUdIVCA7XG4gICAgICAgICAgICAvLyBidG4ueCA9IHRoaXMuYXBwLnNjcmVlbi53aWR0aCAtIDY0O1xuICAgICAgICAgICAgLy8gYnRuLnkgPSB0aGlzLmFwcC5zY3JlZW4uaGVpZ2h0IC0gNDg7XG4gICAgICAgICAgICBidG4uaW50ZXJhY3RpdmUgPSB0cnVlO1xuICAgICAgICAgICAgYnRuLm9uKCdwb2ludGVydXAnLCB0aGlzLnNwaW4uYmluZCh0aGlzKSk7XG5cbiAgICAgICAgICAgIHRoaXMuYXBwLnN0YWdlLmFkZENoaWxkKGJ0bik7XG5cbiAgICAgICAgfVxuXG4gICAgICAgIHNwaW4oKSB7XG4gICAgICAgICAgICB0aGlzLnJlZWxWaWV3Lm9uU3BpbigpO1xuICAgICAgICB9XG5cblxuICAgIH1cbn1cbiIsIm1vZHVsZSB2aWV3IHtcbiAgICBleHBvcnQgY2xhc3MgTG9hZGluZ1ZpZXcgZXh0ZW5kcyBQSVhJLkdyYXBoaWNzIHtcblxuICAgICAgICBwcml2YXRlIHByb2dyZXNzOiBudW1iZXIgPSAwO1xuICAgICAgICBjb2xvcjogbnVtYmVyID0gMHhhYWJjMTNcblxuICAgICAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgICAgIHN1cGVyKCk7XG4gICAgICAgIH1cblxuICAgICAgICBwdWJsaWMgdXBkYXRlUHJvZ3Jlc3MocDogbnVtYmVyKSB7XG4gICAgICAgICAgICBsZXQgcGVyY2VudCA9IHA7XG4gICAgICAgICAgICB0aGlzLnByb2dyZXNzID0gcGVyY2VudDtcblxuICAgICAgICAgICAgdGhpcy5jbGVhcigpO1xuICAgICAgICAgICAgdGhpcy5saW5lU3R5bGUoMTAsIHRoaXMuY29sb3IpO1xuICAgICAgICAgICAgLy8gdGhpcy5kcmF3Q2lyY2xlKDAsIDAsIDIgKiBNYXRoLlBJICogcGVyY2VudCk7XG4gICAgICAgICAgICB0aGlzLmFyYygwLCAwLCA1MCwgMCwgMiAqIE1hdGguUEkgKiBwZXJjZW50KTtcbiAgICAgICAgICAgIHRoaXMuZW5kRmlsbCgpO1xuICAgICAgICB9XG5cbiAgICB9XG59XG4iLCJtb2R1bGUgdmlldyB7XG4gICAgZXhwb3J0IGNsYXNzIFJlZWxWaWV3IGV4dGVuZHMgUElYSS5TcHJpdGUge1xuXG4gICAgICAgIHByaXZhdGUgZnJhbWU6IFBJWEkuR3JhcGhpY3M7XG4gICAgICAgIHByaXZhdGUgd2hlZWw6IHZpZXcuV2hlZWxWaWV3O1xuICAgICAgICBwcml2YXRlIHNob3BzOiBzdHJpbmdbXTtcblxuICAgICAgICBwcml2YXRlIHRlbXBJZHM6IG51bWJlcltdID0gWzAsIDEsIDJdO1xuICAgICAgICBzcGluaW5nOiBib29sZWFuO1xuICAgICAgICAvLyBwcml2YXRlIF9tYXNrOiBQSVhJLkRpc3BsYXlPYmplY3Q7XG5cbiAgICAgICAgY29uc3RydWN0b3Ioc2hvcHM6IHN0cmluZ1tdKSB7XG4gICAgICAgICAgICBzdXBlcigpO1xuICAgICAgICAgICAgdGhpcy5zaG9wcyA9IHNob3BzO1xuXG4gICAgICAgICAgICBsZXQgd2lkdGggPSBBcHAuQ29uc3RhbnRzLlNZTUJPTF9XSURUSDtcbiAgICAgICAgICAgIGxldCBoZWlnaHQgPSBBcHAuQ29uc3RhbnRzLlNZTUJPTF9IRUlHSFQ7XG5cbiAgICAgICAgICAgIHRoaXMuZnJhbWUgPSBuZXcgUElYSS5HcmFwaGljcygpO1xuICAgICAgICAgICAgdGhpcy5mcmFtZS5saW5lU3R5bGUoMTAsIDB4MDAwMDAwKTtcbiAgICAgICAgICAgIHRoaXMuZnJhbWUuZHJhd1JlY3QoLXdpZHRoICogMC41LCAtaGVpZ2h0ICogMC41LCB3aWR0aCwgaGVpZ2h0KTtcbiAgICAgICAgICAgIHRoaXMuZnJhbWUuZW5kRmlsbCgpO1xuXG4gICAgICAgICAgICAvLyBtYXNrXG4gICAgICAgICAgICBsZXQgbWFzayA9IG5ldyBQSVhJLkdyYXBoaWNzKCk7XG4gICAgICAgICAgICBtYXNrLmJlZ2luRmlsbCgweEZGRkZGRik7XG4gICAgICAgICAgICBtYXNrLmRyYXdSZWN0KC13aWR0aCAqIDAuNSwgLWhlaWdodCAqIDAuNSwgd2lkdGgsIGhlaWdodCk7XG4gICAgICAgICAgICBtYXNrLmVuZEZpbGwoKTtcblxuXG4gICAgICAgICAgICAvLyB3aGVlbFxuICAgICAgICAgICAgbGV0IHdoZWVsID0gbmV3IHZpZXcuV2hlZWxWaWV3KHNob3BzKTtcbiAgICAgICAgICAgIHdoZWVsLm1hc2sgPSBtYXNrO1xuICAgICAgICAgICAgd2hlZWwuc2V0SWRzKHRoaXMudGVtcElkcyk7XG4gICAgICAgICAgICB0aGlzLndoZWVsID0gd2hlZWw7XG5cblxuICAgICAgICAgICAgdGhpcy5hZGRDaGlsZCh3aGVlbCwgbWFzaywgdGhpcy5mcmFtZSk7XG5cbiAgICAgICAgICAgIHRoaXMudXBkYXRlU2hvcCh0aGlzLnRlbXBJZHMpO1xuICAgICAgICB9XG5cbiAgICAgICAgdXBkYXRlU2hvcChzaG9wSWQ6IG51bWJlcltdKSB7XG4gICAgICAgICAgICB0aGlzLndoZWVsLnNldElkcyhzaG9wSWQpO1xuICAgICAgICB9XG5cbiAgICAgICAgb25TcGluKCkge1xuICAgICAgICAgICAgaWYgKHRoaXMuc3BpbmluZykge1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMuc3BpbmluZyA9IHRydWU7XG4gICAgICAgICAgICBUd2Vlbk1heC5mcm9tVG8odGhpcy53aGVlbC5wb3NpdGlvbiwgMC4yLCB7IHk6IDAgfSwgeyB5OiBBcHAuQ29uc3RhbnRzLlNZTUJPTF9IRUlHSFQsIHJlcGVhdDogMTAsIGVhc2U6IExpbmVhci5lYXNlTm9uZSwgb25SZXBlYXQ6IHRoaXMuc3dhcElkLCBvblJlcGVhdFNjb3BlOiB0aGlzLCBvbkNvbXBsZXRlOiB0aGlzLm9uU3BpbkNvbXBsZXRlLCBvbkNvbXBsZXRlU2NvcGU6IHRoaXMgfSk7XG5cbiAgICAgICAgfVxuXG4gICAgICAgIHJhbmRvbUlkKCk6IG51bWJlciB7XG4gICAgICAgICAgICByZXR1cm4gTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogdGhpcy5zaG9wcy5sZW5ndGgpO1xuICAgICAgICB9XG5cbiAgICAgICAgc3dhcElkKCkge1xuICAgICAgICAgICAgdGhpcy50ZW1wSWRzLnVuc2hpZnQodGhpcy5yYW5kb21JZCgpKTtcbiAgICAgICAgICAgIHRoaXMudXBkYXRlU2hvcCh0aGlzLnRlbXBJZHMpO1xuICAgICAgICB9XG5cbiAgICAgICAgb25TcGluQ29tcGxldGUoKSB7XG5cbiAgICAgICAgICAgIHRoaXMuc3BpbmluZyA9IGZhbHNlO1xuICAgICAgICAgICAgdGhpcy50ZW1wSWRzLnVuc2hpZnQodGhpcy5yYW5kb21JZCgpKTtcbiAgICAgICAgICAgIHRoaXMudGVtcElkcy51bnNoaWZ0KHRoaXMucmFuZG9tSWQoKSk7XG4gICAgICAgICAgICB0aGlzLnVwZGF0ZVNob3AodGhpcy50ZW1wSWRzKTtcblxuICAgICAgICAgICAgVHdlZW5MaXRlLmZyb21Ubyh0aGlzLndoZWVsLnBvc2l0aW9uLCAxLCB7IHk6IC1BcHAuQ29uc3RhbnRzLlNZTUJPTF9IRUlHSFQgfSwgeyB5OiAwLCBlYXNlOkJhY2suZWFzZU91dCB9KTtcbiAgICAgICAgfVxuICAgIH1cbn0iLCJtb2R1bGUgdmlldyB7XG4gICAgZXhwb3J0IGNsYXNzIFdoZWVsVmlldyBleHRlbmRzIFBJWEkuU3ByaXRlIHtcblxuICAgICAgICBwcml2YXRlIHNob3BzOiBzdHJpbmdbXTtcblxuICAgICAgICBjb25zdHJ1Y3RvcihzaG9wczogc3RyaW5nW10pIHtcbiAgICAgICAgICAgIHN1cGVyKFBJWEkuVGV4dHVyZS5FTVBUWSk7XG4gICAgICAgICAgICB0aGlzLnNob3BzID0gc2hvcHM7XG5cblxuICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCAzOyBpKyspIHtcbiAgICAgICAgICAgICAgICBsZXQgc3ltYm9sVGV4dCA9IG5ldyBQSVhJLlRleHQoXCJcIiwgeyBmaWxsOiBcIjB4MDAwMDAwXCIgfSk7XG4gICAgICAgICAgICAgICAgc3ltYm9sVGV4dC5hbmNob3Iuc2V0KDAuNSk7XG5cbiAgICAgICAgICAgICAgICBsZXQgYmcgPSBuZXcgUElYSS5TcHJpdGUoUElYSS5UZXh0dXJlLldISVRFKTtcbiAgICAgICAgICAgICAgICBiZy53aWR0aCA9IEFwcC5Db25zdGFudHMuU1lNQk9MX1dJRFRIO1xuICAgICAgICAgICAgICAgIGJnLmhlaWdodCA9IEFwcC5Db25zdGFudHMuU1lNQk9MX0hFSUdIVDtcbiAgICAgICAgICAgICAgICBiZy5hbmNob3Iuc2V0KDAuNSk7XG5cbiAgICAgICAgICAgICAgICBsZXQgY29udGFpbmVyID0gbmV3IFBJWEkuQ29udGFpbmVyKCk7XG4gICAgICAgICAgICAgICAgY29udGFpbmVyLmFkZENoaWxkKGJnLCBzeW1ib2xUZXh0KTtcbiAgICAgICAgICAgICAgICBjb250YWluZXIueSA9IChpIC0gMSkgKiBBcHAuQ29uc3RhbnRzLlNZTUJPTF9IRUlHSFQ7XG5cbiAgICAgICAgICAgICAgICB0aGlzLmFkZENoaWxkKGNvbnRhaW5lcik7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBzZXRJZHMoaWRzOiBudW1iZXJbXSkge1xuICAgICAgICAgICAgdGhpcy5jaGlsZHJlbi5mb3JFYWNoKChjaGlsZDogUElYSS5Db250YWluZXIsIGkpID0+IHtcbiAgICAgICAgICAgICAgICBsZXQgdGV4dFZpZXcgPSBjaGlsZC5nZXRDaGlsZEF0KDEpIGFzIFBJWEkuVGV4dDtcbiAgICAgICAgICAgICAgICB0ZXh0Vmlldy50ZXh0ID0gdGhpcy5zaG9wc1tpZHNbaV1dO1xuICAgICAgICAgICAgfSlcbiAgICAgICAgfVxuXG4gICAgfVxufSJdfQ==
